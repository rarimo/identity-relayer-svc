// Package data contains generated code for schema 'public'.
package data

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/csv"
	"errors"
	"fmt"
	"regexp"
	"strings"
)

// StringSlice is a slice of strings.
type StringSlice []string

// quoteEscapeRegex is the regex to match escaped characters in a string.
var quoteEscapeRegex = regexp.MustCompile(`([^\\]([\\]{2})*)\\"`)

// Scan satisfies the sql.Scanner interface for StringSlice.
func (ss *StringSlice) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid StringSlice")
	}

	// change quote escapes for csv parser
	str := quoteEscapeRegex.ReplaceAllString(string(buf), `$1""`)
	str = strings.Replace(str, `\\`, `\`, -1)

	// remove braces
	str = str[1 : len(str)-1]

	// bail if only one
	if len(str) == 0 {
		*ss = StringSlice([]string{})
		return nil
	}

	// parse with csv reader
	cr := csv.NewReader(strings.NewReader(str))
	slice, err := cr.Read()
	if err != nil {
		fmt.Printf("exiting!: %v\n", err)
		return err
	}

	*ss = StringSlice(slice)

	return nil
}

// Value satisfies the driver.Valuer interface for StringSlice.
func (ss StringSlice) Value() (driver.Value, error) {
	v := make([]string, len(ss))
	for i, s := range ss {
		v[i] = `"` + strings.Replace(strings.Replace(s, `\`, `\\\`, -1), `"`, `\"`, -1) + `"`
	}
	return "{" + strings.Join(v, ",") + "}", nil
} // Aggregated represents a row from 'public.aggregateds'.
type Aggregated struct {
	Gist         string `db:"gist"`         // gist
	StateRoot    string `db:"state_root"`   // state_root
	Operation    string `db:"operation"`    // operation
	Confirmation string `db:"confirmation"` // confirmation

}

// AggregatedTransition represents a row from 'public.aggregated_transitions'.
type AggregatedTransition struct {
	Tx        string `db:"tx"`         // tx
	Gist      string `db:"gist"`       // gist
	StateRoot string `db:"state_root"` // state_root
	Chain     string `db:"chain"`      // chain

}

// Gist represents a row from 'public.gists'.
type Gist struct {
	ID           string `db:"id"`           // id
	Operation    string `db:"operation"`    // operation
	Confirmation string `db:"confirmation"` // confirmation

}

// GistTransition represents a row from 'public.gist_transitions'.
type GistTransition struct {
	Tx    string `db:"tx"`    // tx
	Gist  string `db:"gist"`  // gist
	Chain string `db:"chain"` // chain

}

// GorpMigration represents a row from 'public.gorp_migrations'.
type GorpMigration struct {
	ID        string       `db:"id"`         // id
	AppliedAt sql.NullTime `db:"applied_at"` // applied_at

}

// State represents a row from 'public.states'.
type State struct {
	ID           string `db:"id"`           // id
	Operation    string `db:"operation"`    // operation
	Confirmation string `db:"confirmation"` // confirmation

}

// Transition represents a row from 'public.transitions'.
type Transition struct {
	Tx    string `db:"tx"`    // tx
	State string `db:"state"` // state
	Chain string `db:"chain"` // chain

}
